import sqlite3

class SQLite:
    """ Basic wrapper class for SQLite interaction (WIP) """

    def __init__(self, dbname:str):
        """ Constructor """
        self.dbname = dbname
        self.db = sqlite3.connect(self.dbname)
        self.cursor = self.db.cursor()

    def close(self):
        """ Closes the db connection """
        self.cursor.close()
        self.db.close()

    def execute(self, stmt:str, conds:tuple):
        """ Executes a SQL statement - useful for UPDATE and DELETE etc """
        self.cursor.execute(stmt, conds)
        self.db.commit()
        row_count = self.cursor.rowcount
        return row_count

    def select(self, stmt:str, conds:tuple):
        """ Execute a select statement and returns a list """
        results = self.cursor.execute(stmt, conds).fetchall()
        return results

    def tables_exist(self, tablenames:list):
        """ Check if tables in the supplied list exist """
        table_results = self.cursor.execute('''
            SELECT name
            FROM sqlite_master
            WHERE name IN (%s)
        ''' % ','.join('?'*len(tablenames)), tablenames).fetchall()

        if (len(table_results) == len(tablenames)):
            return True
        else:
            return False

    def insert(self, stmt:str, value:tuple):
        """ Execute an insert statement and return the autogenerated row id """
        self.cursor.execute(stmt, value)
        self.db.commit()
        last_row_id = self.cursor.lastrowid
        return last_row_id

    def insert_many(self, stmt:str, values:tuple):
        """ Execute multiple insert statements and return the number of rows inserted """
        self.cursor.executemany(stmt, values)
        self.db.commit()
        insert_row_count = self.cursor.rowcount
